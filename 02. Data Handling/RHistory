source('E:/01. The University of Edinburgh/03. Principles of Data Analytics/02. R Material/Review PoDA.R')
source('E:/01. The University of Edinburgh/03. Principles of Data Analytics/02. R Material/Review PoDA.R')
source('E:/01. The University of Edinburgh/03. Principles of Data Analytics/02. R Material/Review PoDA.R')
source('E:/01. The University of Edinburgh/03. Principles of Data Analytics/02. R Material/Review PoDA.R')
summary(weather)
air <- c(30,25,12,45,50,52,38,39,45,33)
scale(air)
air <- c(30,25,12,45,50,52,38,39,45,33)
scale(air)
source('E:/01. The University of Edinburgh/03. Principles of Data Analytics/02. R Material/Review PoDA.R')
x = scale(air)
summary(x)
var(x)
air <- c(30,25,12,45,50,52,38,39,45,33)
scale(air)
boxplot(air, range=1.5)
boxplot(wather, range=1.5)
boxplot(weather, range=1.5)
boxplot(scale(air), range=1.5)
boxplot(air, range=1.5)
boxplot(DataValues, range=1.5)
library(ineq)
install.packages(ineq)
install.packages('ineq')
library(ineq)
x <- c(20,20,20,20,20)
plot(Lc(x))
plot(Lc(air))
plot(Lc(weather))
plot(Lc(air))
plot(Lc(air))
air <- c(30,30,30,30,30,30,30,25,12,45,50,52,38,39,45,33)
plot(Lc(air))
farm <- c(20,14,59,9,36,23,3)
ineq(farm)
ineq(x)
Class <- c(rep('1: Economy',62),rep('2: Business',25),
rep('3: First',13))
Rating <- c(rep('1=poor',10),rep('2=fair',33),...)
Class <- c(rep('1: Economy',62),rep('2: Business',25),
rep('3: First',13))
library(lattice)
barchart(table(Class,Rating),horizontal=FALSE,stack=FALSE)
barchart(table(Class,Rating),horizontal=FALSE,stack=TRUE)
SampleSize = c(545,2338,3171,2597,2740,3447,3098,2610,2819,2057,2174,2709)
boxplot(SampleSize)
title("Sample Size")
title("Sample Sizes")
boxplot(SampleSize)
title("Sample Sizes")
ylab("Number of Vehicles Inspected")
ylabel("Number of Vehicles Inspected")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected")
title("Sample Sizes")
title("Box plot Sample Sizes")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected")
title("Box plot Sample Sizes")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "blue")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "gold")
ggplot(airquality, aes(x = Month, y = Ozone)) +
geom_boxplot()
library(ggplot)
install.packages("ggplot")
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
airquality
ggplot(airquality, aes(x = Month, y = Ozone)) +
geom_boxplot()
ggplot(SampleSize, aes(x = Month, y = Ozone)) +
geom_boxplot()
ggplot(SampleSize, aes(x = SampleSize, y = Ozone)) +
geom_boxplot()
ggplot(SampleSize, aes(x = SampleSize, y = SampleSize)) +
geom_boxplot()
ggplot(SampleSize, aes(x = y = SampleSize)) +
geom_boxplot()
ggplot(SampleSize, aes(y = SampleSize)) +
geom_boxplot()
ggplot(SampleSize) +
geom_boxplot()
install.packages("shiny")
install.packages("shinythemes")
library(shiny)
library(shinythemes)
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "gold")
title("Box plot Sample Sizes")
ylabel("Number of Vehicles Inspected")
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE)
ggplot(SampleSize, aes(x=dose, y=len)) +
geom_boxplot()
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "red")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "royalblue2")
install.packages("wesanderson")
library(wesanderson)
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "Moonrise1")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "Moonrise1")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "royalblue")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "royalblue2")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "royalblue3")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "royalblue4")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "royalblue5")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "royalblue2")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "cornflowerblue")
boxplot(SampleSize, ylab = "Number of Vehicles Inspected", col = "slategray2")
title("Box plot Sample Sizes")
x <- 1:10
y <- jitter(x^2)
plot(x, y, pch=20)
fit <- glm(y~x)
co <- coef(fit)
abline(fit, col="blue", lwd=2)
y <- jitter(x^2)
plot(x, y, pch=20)
fit <- glm(y~x)
co <- coef(fit)
abline(fit, col="slategray2", lwd=2)
Years = c(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011)
fit <- glm(SamplesSize~Years)
fit <- glm(SampleSize~Years)
co <- coef(fit)
plot(SampleSize, Years, pch=20)
plot(Years, SampleSize, pch=20)
fit <- glm(Years~SampleSize)
co <- coef(fit)
abline(fit, col="slategray2", lwd=2)
fit <- glm(SampleSize~Years)
SampleSize = c(2338,3171,2597,2740,3447,3098,2610,2819,2057,2174,2709)
Years = c(2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011)
plot(Years, SampleSize, pch=20)
fit <- glm(SampleSize~Years)
co <- coef(fit)
abline(fit, col="slategray2", lwd=2)
barplot(Years, SampleSize, pch=20)
barplot(Years, SampleSize)
load("~/Win7/Desktop/01. Machine Learning Classification/01. Original/.RData")
rm(list = ls())
library(xlsx)
library(fpp)
library(fpp)
install.packages(xslx)
install.packages(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(fpp)
qnorm(0.95)
qnorm(0.995)
qnorm(0.995)
qnorm(0.1)
qnorm(0.5)
binom.test(x=39,n=100)$conf.int
beer2 <- window(ausbeer,start=1992,end=2006-.1)
beerfit1 <- meanf(beer2, h=11)
beerfit2 <- naive(beer2, h=11)
beerfit3 <- snaive(beer2, h=11)
plot(beerfit1, plot.conf=FALSE,
main="Forecasts for quarterly beer production")
lines(beerfit2$mean,col=2)
lines(beerfit3$mean,col=3)
legend("topright",lty=1,col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
library(fpp)
beer2 <- window(ausbeer,start=1992,end=2006-.1)
beerfit1 <- meanf(beer2, h=11)
beerfit2 <- naive(beer2, h=11)
beerfit3 <- snaive(beer2, h=11)
plot(beerfit1, plot.conf=FALSE,
main="Forecasts for quarterly beer production")
lines(beerfit2$mean,col=2)
lines(beerfit3$mean,col=3)
legend("topright",lty=1,col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
plot(log(elec), ylab="Transformed electricity demand",
xlab="Year", main="Transformed monthly electricity demand")
title(main="Log",line=-1)
# The BoxCox.lambda() function will choose a value of lambda for you.
lambda <- BoxCox.lambda(elec) # = 0.27
plot(BoxCox(elec,lambda))
plot(elec, ylab="Transformed electricity demand",
xlab="Year", main="Transformed monthly electricity demand")
title(main="Log",line=-1)
beerfit3 <- snaive(elec, h=11)
plot(beerfit3)
beerfit3 <- snaive(log(elec), h=11)
plot(beerfit3)
plot(elec, ylab="Transformed electricity demand",
xlab="Year", main="Transformed monthly electricity demand")
title(main="Log",line=-1)
monthdays <- rep(c(31,28,31,30,31,30,31,31,30,31,30,31),14)
monthdays[26 + (4*12)*(0:2)] <- 29
par(mfrow=c(2,1))
plot(milk, main="Monthly milk production per cow",
ylab="Pounds",xlab="Years")
plot(milk/monthdays, main="Average milk production per cow per day",
ylab="Pounds", xlab="Years")
dj2 <- window(dj, end=250)
plot(dj2, main="Dow Jones Index (daily ending 15 Jul 94)",
ylab="", xlab="Day")
res <- residuals(naive(dj2))
plot(res, main="Residuals from naive method",
ylab="", xlab="Day")
Acf(res, main="ACF of residuals")
hist(res, nclass="FD", main="Histogram of residuals")
library(readr)
carst <- read_csv("~/Win7/Desktop/carst.csv")
View(carst)
carst$is_CNG = ifelse(carst$FuelType == "CNG", 1, 0)
View(carst)
install.packages("stargazer")
carst$is_Diesel = ifelse(carst$FuelType == "Diesel", 1, 0)
carst$is_Petrol = ifelse(carst$FuelType == "Petrol", 1, 0)
View(carst)
result = lm(Price~Age + Km + is_CNG + is_Petrol + weight + Metcolor + CC + Gender, data = carst)
View(carst)
result = lm(Price~Age + Km + is_CNG + is_Petrol + Weight + Metcolor + CC + Gender, data = carst)
View(carst)
result = lm(Price~Age + Km + is_CNG + is_Petrol + Weight + MetColor + CC + Gender, data = carst)
stargazer(result)
library(stargazer)
result =
lm(Price~Age + Km + is_CNG + is_Petrol + Weight + MetColor + CC + Gender, data = carst)
stargazer(result)
stargazer(result, type="text")
View(carst)
View(carst)
View(carst)
result = lm(Price~Age + Km + is_CNG + is_Petrol + Weight + MetColor + CC + Gender + CC:Km + I(CC^2) + I(Km^2), data = carst)
stargazer(result)
stargazer(result, type="text")
library(readxl)
DataTestNormality <- read_excel("~/Win7/Desktop/DataTestNormality.xlsx")
View(DataTestNormality)
library("nortest")
shapiro.test(DataTestNormality)
DataTestNormality = as.numeric(DataTestNormality)
View(DataTestNormality)
shapiro.test(DataTestNormality)
is.numeric(DataTestNormality)
View(DataTestNormality)
library(readxl)
DataTestNormality <- read_excel("~/Win7/Desktop/DataTestNormality.xlsx",
col_types = c("numeric"))
View(DataTestNormality)
DataTestNormality = as.numeric(DataTestNormality)
shapiro.test(DataTestNormality)
DataTestNormality$`6.9374000000000005E-2` = as.numeric(DataTestNormality$`6.9374000000000005E-2`)
shapiro.test(DataTestNormality)
Data = DataTestNormality$`6.9374000000000005E-2`
shapiro.test(Data)
pearson.test(Data)
library(readxl)
wait_time <- read_excel("~/Win7/Desktop/wait time.xlsx")
View(wait_time)
shapiro.test(wait_time$AverageWaitOrderingQueueHours)
pearson.test(wait_time$AverageWaitOrderingQueueHours)
ks.test(wait_time$AverageWaitOrderingQueueHours)
ks.test(wait_time$AverageWaitOrderingQueueHours,y="pnorm")
shapiro.test(wait_time$AverageWaitOrderingQueueHours)
pearson.test(wait_time$AverageWaitOrderingQueueHours)
ks.test(wait_time$AverageWaitOrderingQueueHours,"pnorm")
library(UBL)
DataPath = "02. Ouputs/02. Training File/Training.csv"
Data = read.csv(DataPath,colClasses="factor")
RepartionClicks = table(Data$click)
setwd("E:/SUBMISSION/02. Data Handling")
DataPath = "02. Ouputs/02. Training File/Training.csv"
Data = read.csv(DataPath,colClasses="factor")
RepartionClicks = table(Data$click)
Data = SmoteClassif(click ~ ., Data, C.perc = list("0" = 1,"1" = RepartionClicks[1]/RepartionClicks[2]), dist = "Overlap")
Data <- Data[sample(nrow(Data)),]
write.csv(Data, file = DataPath, row.names = FALSE)
